package yourpackage

import (
    "testing"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/mock"
    "github.com/google/uuid"
)

// Mocking the dependencies
type MockDbCon struct {
    mock.Mock
}

func (m *MockDbCon) Raw(query string, args ...interface{}) *MockDbCon {
    m.Called(query, args)
    return m
}

func (m *MockDbCon) Find(dest interface{}) *MockDbCon {
    m.Called(dest)
    return m
}

type MockS struct {
    mock.Mock
}

func (m *MockS) getGorm() *MockDbCon {
    args := m.Called()
    return args.Get(0).(*MockDbCon)
}

func TestGetItsmMetricJson(t *testing.T) {
    mockDbCon := new(MockDbCon)
    mockS := new(MockS)
    mockS.On("getGorm").Return(mockDbCon)
    
    // Mock inputs
    graphRequest := &model.GraphRequest{
        EntityId: []model.EntityId{
            {Id: uuid.New(), MetricIds: []uuid.UUID{uuid.New()}},
        },
    }

    // Mock outputs
    mockResult := []entity.NonMetricQueryResult{
        {Id: uuid.New(), Value: "mockValue"},
    }

    mockDbCon.On("Raw", mock.Anything, mock.Anything, mock.Anything, mock.Anything, mock.Anything).Return(mockDbCon)
    mockDbCon.On("Find", mock.Anything).Run(func(args mock.Arguments) {
        *args.Get(0).(*[]entity.NonMetricQueryResult) = mockResult
    }).Return(mockDbCon)

    itsmMetric, err := mockS.GetItsmMetricJson(graphRequest)

    // Assertions
    assert.NoError(t, err)
    assert.NotNil(t, itsmMetric)
    assert.Equal(t, len(itsmMetric.MetricData), len(mockResult))
    assert.Equal(t, itsmMetric.MetricData[0].Value, mockResult[0].Value)
}