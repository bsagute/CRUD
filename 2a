package yourpackage

import (
    "github.com/stretchr/testify/mock"
    "github.com/google/uuid"
    "yourproject/entity"
    "yourproject/model"
)

type MockS struct {
    mock.Mock
}

func (m *MockS) GetItsmMetricJson(request *model.GraphRequest) ([]entity.NonMetricQueryResult, error) {
    args := m.Called(request)
    return args.Get(0).([]entity.NonMetricQueryResult), args.Error(1)
}





func TestGetItsmMetricJson(t *testing.T) {
    mockDbCon := new(MockDbCon)
    mocks := new(MockS)
    mocks.On("getGorm").Return(mockDbCon)

    // Mock inputs
    graphRequest := &model.GraphRequest{
        EntityId: model.GraphEntityId{
            Id:      uuid.New(),
            Metrics: []uuid.UUID{uuid.New()},
        },
    }

    // Mock outputs
    mockResult := []entity.NonMetricQueryResult{
        {EntityId: uuid.New(), Metrics: []byte("metricvalue")},
    }

    mockDbCon.On("Raw", mock.Anything, mock.Anything, mock.Anything, mock.Anything, mock.Anything, mock.Anything).Run(func(args mock.Arguments) {
        args.Get(0).(*[]entity.NonMetricQueryResult)[0] = mockResult[0]
    }).Return(mockDbCon)

    mockDbCon.On("Find", mock.Anything).Run(func(args mock.Arguments) {
        args.Get(0).(*[]entity.NonMetricQueryResult)[0] = mockResult[0]
    }).Return(mockDbCon)

    mocks.On("GetItsmMetricJson", graphRequest).Return(mockResult, nil)

    itsmMetric, err := mocks.GetItsmMetricJson(graphRequest)

    // Assertions
    assert.NoError(t, err)
    assert.NotNil(t, itsmMetric)
    assert.Equal(t, len(graphRequest.MetricData()), len(mockResult))
    assert.Equal(t, itsmMetric[0].Metrics, mockResult[0].Metrics)
}